<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>keybridge.lib</groupId>
  <artifactId>gis-kml</artifactId>
  <version>2.0.1</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>keybridge.lib</groupId>
    <artifactId>gis</artifactId>
    <version>1.0.0</version>
  </parent>

  <name>lib-gis-kml</name>
  <description>A KML reader and writer.

    Provides automatically generated full reference implementation of the KML object
    model defined by OGC’s KML standard and Google’s GX extensions. It is an object
    orientated API that enables the convenient and easy use of KML in existing Java
    environments.

    KML is an XML-based language schema that describes and visualizes geographic
    data. The language is often used in 2D web based maps and 3D virtual globes.
    Originally developed for Google Earth as a means of maintaining and exchanging
    geographical data, the language was defined by the Open Geospatial Consortium
    (OGC) as a standard in April 2008. So far, many virtual globes, like for example
    NASA’s Earth Wind and Microsoft’s Virtual Earth, have adopted the KML language
    as their data format of choice.

    In order to ensure convenient and easy use of KML in existing Java-systems, an
    object oriented API is necessary. APIs for XML dialects are implemented using two
    layers. The current official XML schema of KML in conjunction with the JAXB
    technology is used to generate Java class representations automatically. KML’s
    schema is a document describing the correct syntax of KML files and can, therefore,
    be used for validating the corresponding KML files. The semantic application
    layer, which is found on top of the JAXB layer, is abstracted from the raw generated
    classes and defines a well-shaped API.

    This library uses code from the micromata.de Jave API for KML (JAK) project.

    Usage:

    Read:
    Kml kml = Kml.unmarshall( [document.kml] );
    GisFeature gisFeature = KmlReader.read(kml);

    Write:
    Kml kml = KmlWriter.write(gisFeature);


    History:
    v0.0.1 - create new project and compile
    v1.0.0 - KML writer working just fine, thank you
    v1.0.1 - update lib dependencies
    v1.1.0 - remove DTO KML writer - this lib is KML only - IO is in gis-dto library
    v1.2.0 - reverse v1.1.0 - add KML writer and reader, depends upon lib-gis-dto
    v1.3.0 - bump versions and dependencies
    v1.3.1 - bump GIS DTO versions and dependencies
    v1.4.0 - refactor to use DTOs
    v2.0.0 - rewrite using internal "KmlShape" DTO, remove GIS DTO dependency
    v2.0.1 - rewrite pom using 'gis' parent for improved dependency management

  </description>

  <properties>
    <javadoc.opts>-Xdoclint:none</javadoc.opts>
    <additionalparam>-Xdoclint:none</additionalparam>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.vividsolutions</groupId>
      <artifactId>jts</artifactId>
    </dependency>

    <!--use the following will enable the GeoTools Encoder-->
    <!--    <dependency>
      <groupId>org.geotools</groupId>
      <artifactId>gt-xml</artifactId>
      <version>${geotools.version}</version>
    </dependency>
    <dependency>
      <groupId>org.geotools.xsd</groupId>
      <artifactId>gt-xsd-kml</artifactId>
      <version>${geotools.version}</version>
    </dependency>-->

  </dependencies>


  <profiles>
    <profile>
      <id>disable-java8-doclint</id>
      <activation>
        <jdk>[1.8,)</jdk>
      </activation>
      <properties>
        <additionalparam>-Xdoclint:none</additionalparam>
      </properties>
    </profile>
  </profiles>

</project>